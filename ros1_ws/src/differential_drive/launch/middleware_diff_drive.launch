
<launch>
                                                 <!-- Donatello launch file -->

  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->


                                 <!-- ............Setting rosserial......... -->

  <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyUSB0"/>
    <param name="baud" value="57600"/>
  </node>

                                 <!-- ............Middleware......... -->
 
 <rosparam param="ticks_meter">2920</rosparam>

  	<node pkg="differential_drive" type="diff_tf.py" name="diff_tf">
		<rosparam param="rate">10.0</rosparam>
		<rosparam param="base_width">0.29</rosparam>
		<rosparam param="ticks_meter">2920</rosparam>
		<remap from="odom" to="/wheel/odometry"/>
	</node>

	<node pkg="differential_drive" type="twist_to_motors.py" name="twist_to_motors" output="screen">
		<rosparam param="base_width">0.29</rosparam>
		<rosparam param="rate">10.0</rosparam>
    <remap from="twist" to="/cmd_vel"/>
	</node>

  <node pkg="differential_drive" type="vel_pid.py" name="motion_control">
	</node>

	<node pkg="differential_drive" type="pid_velocity.py" name="lpid_velocity">
		 <remap from="wheel" to="lwheel"/>
		 <remap from="motor_cmd" to="lmotor_cmd2"/>
		 <remap from="wheel_vtarget" to="lwheel_vtarget"/>
		 <remap from="wheel_vel" to="lwheel_vel"/>
		 <rosparam param="Kp">10</rosparam> <!--25 is perfect for now-->
		 <rosparam param="Ki">100</rosparam> <!--135 is perfect for now-->
		 <rosparam param="Kd">0.5</rosparam> <!--0.1 or 0.5-->
		 <rosparam param="out_min">-255</rosparam>
		 <rosparam param="out_max">255</rosparam>
		 <rosparam param="rate">31.0</rosparam>
		 <rosparam param="timeout_ticks">4</rosparam>
		 <rosparam param="rolling_pts">5</rosparam>
	</node>

	<node pkg="differential_drive" type="pid_velocity.py" name="rpid_velocity">
		 <remap from="wheel" to="rwheel"/>
		 <remap from="motor_cmd" to="rmotor_cmd2"/>
		 <remap from="wheel_vtarget" to="rwheel_vtarget"/>
		 <remap from="wheel_vel" to="rwheel_vel"/>
		 <rosparam param="Kp">10</rosparam> <!--10 is perfect for now-->
		 <rosparam param="Ki">100</rosparam> <!--100 is perfect for now-->
		 <rosparam param="Kd">0.5</rosparam>
		 <rosparam param="out_min">-255</rosparam>
		 <rosparam param="out_max">255</rosparam>
		 <rosparam param="rate">10.0</rosparam>
		 <rosparam param="timeout_ticks">4</rosparam>
		 <rosparam param="rolling_pts">5</rosparam>
	</node>



                                     <!-- .......Initial Pose and goal Publisher................ -->

  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
<!--   <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node> -->

  <!--<node pkg="simple_navigation_goals" type="simple_navigation_goals" name="simple_navigation_goals">
  </node>-->


                                    <!-- ...........imu ........... -->

 <node pkg="mpu6050_serial_to_imu" type="mpu6050_serial_to_imu_node" name="mpu6050_serial_to_imu_node" required="true">
    <param name="port" value="/dev/ttyACM0"/>
		<param name="tf_parent_frame_id" value="base_link"/>
		<param name="tf_frame_id" value="imu_link"/>
		<param name="frame_id" value="imu_link"/>
		<param name="broadcast_tf" value="false"/>
		<param name="linear_acceleration_stddev" value="2.5e-05"/>
		<param name="angular_velocity_stddev" value="2.5e-05"/>
		<param name="orientation_stddev" value="0.0"/>
  </node>

                                    <!-- ...........LiDAR ........... -->

 <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
	  <param name="serial_port"         type="string" value="/dev/ttyUSB1"/>
	  <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
	  <!--param name="serial_baudrate"     type="int"    value="256000"--><!--A3 -->
	  <param name="frame_id"            type="string" value="lidar_link"/>
	  <param name="inverted"            type="bool"   value="false"/>
	  <param name="angle_compensate"    type="bool"   value="true"/>
 </node>


	
</launch>
